import React, { useState, useCallback } from "react";nnimport classnames from "classnames";nimport { Resizable } from "react-resizable";nnimport CellContent from "./CellContent";nnconst ResizableHeaderCell = props => {n  const { n    onResize, n    width, n    minWidth = 80,n    onResizeStop, n    onResizeStart, n    "data-column-index": columnIndex,n    "data-column-key": columnKey,n    "data-column-at-min-width": isAtMinWidth,n    "data-column-can-shrink": canShrink,n    ...restProps n  } = props;n  const [isResizing, setIsResizing] = useState(false);n  const [resizeStartWidth, setResizeStartWidth] = useState(width);nn  // Enhanced resize start handlern  const handleResizeStart = useCallback((e, data) => {n    e.preventDefault();n    setIsResizing(true);n    setResizeStartWidth(width);n    onResizeStart?.(e, data);n  }, [width, onResizeStart]);nn  // Enhanced resize handler with validationn  const handleResize = useCallback((e, data) => {n    const newWidth = Math.max(data.size.width, minWidth);n    onResize?.(e, { ...data, size: { ...data.size, width: newWidth } });n  }, [onResize, minWidth]);nn  // Enhanced resize stop handlern  const handleResizeStop = useCallback((e, data) => {n    const newWidth = Math.max(data.size.width, minWidth);n    setIsResizing(false);n    setResizeStartWidth(null);n    onResizeStop?.(e, { ...data, size: { ...data.size, width: newWidth } });n  }, [onResizeStop, minWidth]);nn  if (!width) {n    return <CellContent {...restProps} />;n  }nn  // Determine if the column is constrained (at minimum width and cannot shrink further)n  const isConstrained = isAtMinWidth && !canShrink;nn  return (n    <Resizablen      width={width}n      height={0}n      minConstraints={[minWidth, 0]}n      maxConstraints={[width * 3, 0]} // Allow up to 3x the current widthn      onResize={handleResize}n      onResizeStop={handleResizeStop}n      onResizeStart={handleResizeStart}n      draggableOpts={{ enableUserSelectHack: false }}n      handle={n        <spann          className={classnames("react-resizable-handle", {n            "react-resizable-handle--resizing": isResizing,n            "react-resizable-handle--constrained": isConstrained,n            "react-resizable-handle--at-min-width": isAtMinWidth,n          })}n          onClick={e => e.stopPropagation()}n          data-column-index={columnIndex}n          data-column-key={columnKey}n          data-column-at-min-width={isAtMinWidth}n          data-column-can-shrink={canShrink}n          title={isConstrained ? "Column at minimum width" : "Drag to resize column"}n        >n          <span className="neeto-ui-table-react-resizable-handle__inner" />n        </span>n      }n    >n      <CellContent n        {...restProps} n        className={classnames(restProps.className, {n          "neeto-ui-table-cell--resizing": isResizing,n          "neeto-ui-table-cell--constrained": isConstrained,n        })}n      />n    </Resizable>n  );n};nnexport default React.memo(ResizableHeaderCell);