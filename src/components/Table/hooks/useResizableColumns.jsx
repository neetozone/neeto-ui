import React, { useMemo, useCallback } from "react";nnimport { isPresent, noop } from "neetocist";nimport { has } from "ramda";nnimport SortIcon from "../components/SortIcon";nimport TitleWithInfoIcon from "../components/TitleWithInfoIcon";nimport {n  getColumFixedValue,n  getColumnSortOrder,n  sortFrozenColumns,n  MIN_COLUMN_WIDTH,n  DEFAULT_COLUMN_WIDTH,n  validateColumnWidth,n  normalizeColumnWidths,n  isColumnAtMinimumWidth,n  canResizeColumn,n} from "../utils";nn// Threshold for significant width changes to prevent unnecessary updatesnconst WIDTH_CHANGE_THRESHOLD = 5;nnconst useResizableColumns = ({n  columns,n  columnData,n  frozenColumns,n  setColumns,n  isEnabled,n  isAddEnabled,n  isColumnFreezeEnabled,n  onColumnAdd,n  onColumnUpdate,n  onColumnDelete,n  handleSort,n  sortedInfo,n  onColumnHide,n  onColumnFreeze,n  onMoreActionClick,n  tableOnChangeProps,n}) => {n  // Enhanced resize handler with better width managementn  const handleResize = useCallback(n    index =>n    (_, { size }) => {n      const nextColumns = [...columns];n      const newWidth = validateColumnWidth(size.width);n      n      // Ensure the new width doesn't cause layout issuesn      const currentColumn = nextColumns[index];n      const currentWidth = currentColumn.width || DEFAULT_COLUMN_WIDTH;n      n      // Only update if the width change is significant enoughn      if (Math.abs(newWidth - currentWidth) > WIDTH_CHANGE_THRESHOLD) {n        nextColumns[index] = { ...currentColumn, width: newWidth };n        setColumns(nextColumns);n      }n    },n    [columns, setColumns]n  );nn  // Enhanced resize stop handler with validationn  const handleResizeStop = useCallback(n    index =>n    (_, { size }) => {n      const newWidth = validateColumnWidth(size.width);n      const nextColumns = [...columns];n      const currentColumn = nextColumns[index];n      n      // Ensure the final width is validn      if (newWidth >= MIN_COLUMN_WIDTH) {n        nextColumns[index] = { ...currentColumn, width: newWidth };n        setColumns(nextColumns);n        onColumnUpdate(nextColumns);n      }n    },n    [columns, setColumns, onColumnUpdate]n  );nn  const computedColumnsData = useMemo(n    () => {n      // Validate and normalize column widths before processingn      const validatedColumns = normalizeColumnWidths(columns);n      n      return validatedColumnsn        .map((col, index) => {n          const fixed = getColumFixedValue(col, frozenColumns);n          n          // Ensure each column has a validated widthn          const validatedWidth = validateColumnWidth(col.width);n          const isAtMinWidth = isColumnAtMinimumWidth(col);n          const canShrink = canResizeColumn(col, 'shrink');nn          const modifiedColumn = {n            ...col,n            width: validatedWidth,n            onHeaderCell: column => ({n              width: validatedWidth,n              minWidth: MIN_COLUMN_WIDTH,n              onResize: isEnabled ? handleResize(index) : noop,n              onResizeStop: isEnabled ? handleResizeStop(index) : noop,n              isSortable: isPresent(col.sorter),n              onSort: handleSort,n              sortedInfo,n              onColumnHide,n              onColumnFreeze,n              onMoreActionClick,n              isColumnFreezeEnabled,n              isAddEnabled: isAddEnabled && !fixed,n              onAddColumn: positionOffset =>n                onColumnAdd(index + positionOffset),n              isFixedColumn: !!fixed,n              onColumnDelete,n              isHidable: col.isHidable,n              isDeletable: col.isDeletable,n              moreActions: col.moreActions,n              column: col,n              "data-text-align": column.align,n              // Add data attributes for better CSS targetingn              "data-column-index": index,n              "data-column-key": col.dataIndex,n              "data-column-at-min-width": isAtMinWidth,n              "data-column-can-shrink": canShrink,n            }),n            sortIcon: SortIcon,n            sortOrder: getColumnSortOrder(col, sortedInfo),n            fixed,n            title: col.descriptionn              ? props => (n                  <TitleWithInfoIconn                    {...props}n                    description={col.description}n                    title={col.title}n                  />n                )n              : col.title,n          };nn          if (!has("ellipsis", col)) modifiedColumn.ellipsis = true;nn          return modifiedColumn;n        })n        .sort(sortFrozenColumns(columnData));n    },n    [n      columns,n      sortedInfo,n      tableOnChangeProps,n      onColumnFreeze,n      frozenColumns,n      columnData,n      handleResize,n      handleResizeStop,n      isEnabled,n      isAddEnabled,n      onColumnAdd,n      onColumnDelete,n      onColumnHide,n      onMoreActionClick,n      isColumnFreezeEnabled,n    ]n  );nn  return { columns: computedColumnsData };n};nnexport default useResizableColumns;